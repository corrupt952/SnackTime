@import "tailwindcss";

/* Tailwind v4 custom utility for destructive color */
@layer utilities {
  .text-destructive {
    color: var(--color-destructive);
  }
  .text-destructive-foreground {
    color: var(--color-destructive-foreground);
  }
  .bg-destructive {
    background-color: var(--color-destructive);
  }
  .bg-destructive\/90 {
    background-color: color-mix(in srgb, var(--color-destructive) 90%, transparent);
  }
}

/**
 * Theme Layer - Default CSS Custom Properties
 *
 * These color variables serve as defaults for regular DOM usage.
 * They reference base color values (e.g., --background) that are defined
 * in :root/:host and can be overridden by theme classes.
 *
 * IMPORTANT: For Shadow DOM compatibility, these --color-* variables
 * must also be redefined within each theme class (.light, .dark, etc.)
 * to ensure proper CSS variable resolution within the shadow boundary.
 *
 * Without theme-specific redefinition, Shadow DOM elements will always
 * use the :host values, ignoring theme class overrides.
 */
@theme {
  --color-border: hsl(var(--border));
  --color-input: hsl(var(--input));
  --color-ring: hsl(var(--ring));
  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));

  --color-primary: hsl(var(--primary));
  --color-primary-foreground: hsl(var(--primary-foreground));

  --color-secondary: hsl(var(--secondary));
  --color-secondary-foreground: hsl(var(--secondary-foreground));

  --color-destructive: hsl(var(--destructive));
  --color-destructive-foreground: hsl(var(--destructive-foreground));

  --color-muted: hsl(var(--muted));
  --color-muted-foreground: hsl(var(--muted-foreground));

  --color-accent: hsl(var(--accent));
  --color-accent-foreground: hsl(var(--accent-foreground));

  --color-popover: hsl(var(--popover));
  --color-popover-foreground: hsl(var(--popover-foreground));

  --color-card: hsl(var(--card));
  --color-card-foreground: hsl(var(--card-foreground));

  --color-chart-1: hsl(var(--chart-1));
  --color-chart-2: hsl(var(--chart-2));
  --color-chart-3: hsl(var(--chart-3));
  --color-chart-4: hsl(var(--chart-4));
  --color-chart-5: hsl(var(--chart-5));

  --radius-lg: var(--radius);
  --radius-md: calc(var(--radius) - 2px);
  --radius-sm: calc(var(--radius) - 4px);

  --animate-accordion-down: accordion-down 0.2s ease-out;
  --animate-accordion-up: accordion-up 0.2s ease-out;

  @keyframes accordion-down {
    from {
      height: 0;
    }
    to {
      height: var(--radix-accordion-content-height);
    }
  }
  @keyframes accordion-up {
    from {
      height: var(--radix-accordion-content-height);
    }
    to {
      height: 0;
    }
  }
}

@utility container {
  margin-inline: auto;
  padding-inline: 2rem;
  @media (width >= --theme(--breakpoint-sm)) {
    max-width: none;
  }
  @media (width >= 1400px) {
    max-width: 1400px;
  }
}

/*
  The default border color has changed to `currentcolor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentcolor);
  }
}

@layer base {
  /**
   * Base Color Definitions
   *
   * These HSL values serve as the foundation for all color calculations.
   * - :root applies to regular DOM elements
   * - :host applies to Shadow DOM root elements
   *
   * Values are defined in HSL format without the hsl() wrapper to allow
   * flexible usage in various contexts (e.g., with opacity modifiers).
   * These can be overridden by theme classes (.light, .dark, .mint, etc.)
   */
  :root,
  :host {
    --background: 0 0% 98%;
    --foreground: 0 0% 5%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 5%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 5%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 94%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 95%;
    --muted-foreground: 0 0% 40%;
    --accent: 217 91% 60%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 84% 60%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 90%;
    --input: 0 0% 96%;
    --ring: 217 91% 60%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }

  .light {
    --background: 0 0% 98%;
    --foreground: 0 0% 5%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 5%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 5%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 94%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 95%;
    --muted-foreground: 0 0% 40%;
    --accent: 217 91% 60%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 84% 60%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 90%;
    --input: 0 0% 96%;
    --ring: 217 91% 60%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;

    /**
     * Shadow DOM Color Variable Overrides
     *
     * These --color-* definitions are crucial for Shadow DOM compatibility.
     * Without them, elements inside Shadow DOM will use the :host values
     * instead of the theme-specific values, causing colors to remain static
     * regardless of the applied theme class.
     *
     * This duplication is necessary because CSS variable resolution in
     * Shadow DOM doesn't inherit --color-* values from parent scopes
     * when they reference other variables (e.g., var(--background)).
     */
    --color-background: hsl(var(--background));
    --color-foreground: hsl(var(--foreground));
    --color-card: hsl(var(--card));
    --color-card-foreground: hsl(var(--card-foreground));
    --color-popover: hsl(var(--popover));
    --color-popover-foreground: hsl(var(--popover-foreground));
    --color-primary: hsl(var(--primary));
    --color-primary-foreground: hsl(var(--primary-foreground));
    --color-secondary: hsl(var(--secondary));
    --color-secondary-foreground: hsl(var(--secondary-foreground));
    --color-destructive: hsl(var(--destructive));
    --color-destructive-foreground: hsl(var(--destructive-foreground));
    --color-muted: hsl(var(--muted));
    --color-muted-foreground: hsl(var(--muted-foreground));
    --color-accent: hsl(var(--accent));
    --color-accent-foreground: hsl(var(--accent-foreground));
    --color-border: hsl(var(--border));
    --color-input: hsl(var(--input));
    --color-ring: hsl(var(--ring));
  }

  .dark {
    --background: 0 0% 10%;
    --foreground: 0 0% 90%;
    --card: 0 0% 14%;
    --card-foreground: 0 0% 90%;
    --popover: 0 0% 10%;
    --popover-foreground: 0 0% 90%;
    --primary: 0 0% 6%;
    --primary-foreground: 0 0% 90%;
    --secondary: 0 0% 15%;
    --secondary-foreground: 0 0% 85%;
    --muted: 0 0% 14%;
    --muted-foreground: 0 0% 65%;
    --accent: 217 91% 60%;
    --accent-foreground: 0 0% 100%;
    --destructive: 0 84% 60%;
    --destructive-foreground: 0 0% 100%;
    --border: 0 0% 12%;
    --input: 0 0% 12%;
    --ring: 0 0% 60%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;

    /**
     * Shadow DOM Color Variable Overrides
     *
     * These --color-* definitions are crucial for Shadow DOM compatibility.
     * Without them, elements inside Shadow DOM will use the :host values
     * instead of the theme-specific values, causing colors to remain static
     * regardless of the applied theme class.
     *
     * This duplication is necessary because CSS variable resolution in
     * Shadow DOM doesn't inherit --color-* values from parent scopes
     * when they reference other variables (e.g., var(--background)).
     */
    --color-background: hsl(var(--background));
    --color-foreground: hsl(var(--foreground));
    --color-card: hsl(var(--card));
    --color-card-foreground: hsl(var(--card-foreground));
    --color-popover: hsl(var(--popover));
    --color-popover-foreground: hsl(var(--popover-foreground));
    --color-primary: hsl(var(--primary));
    --color-primary-foreground: hsl(var(--primary-foreground));
    --color-secondary: hsl(var(--secondary));
    --color-secondary-foreground: hsl(var(--secondary-foreground));
    --color-destructive: hsl(var(--destructive));
    --color-destructive-foreground: hsl(var(--destructive-foreground));
    --color-muted: hsl(var(--muted));
    --color-muted-foreground: hsl(var(--muted-foreground));
    --color-accent: hsl(var(--accent));
    --color-accent-foreground: hsl(var(--accent-foreground));
    --color-border: hsl(var(--border));
    --color-input: hsl(var(--input));
    --color-ring: hsl(var(--ring));
  }

  .lemon {
    --background: 54 60% 96%;
    --foreground: 45 80% 8%;
    --card: 54 40% 98%;
    --card-foreground: 45 80% 8%;
    --popover: 54 40% 98%;
    --popover-foreground: 45 80% 8%;
    --primary: 45 80% 35%;
    --primary-foreground: 54 60% 98%;
    --secondary: 54 50% 91%;
    --secondary-foreground: 45 80% 25%;
    --muted: 54 40% 93%;
    --muted-foreground: 45 50% 40%;
    --accent: 42 100% 50%;
    --accent-foreground: 54 60% 98%;
    --destructive: 0 84% 60%;
    --destructive-foreground: 54 60% 98%;
    --border: 54 30% 87%;
    --input: 54 40% 93%;
    --ring: 42 100% 50%;
    --chart-1: 45 93% 47%;
    --chart-2: 54 96% 90%;
    --chart-3: 45 50% 45%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;

    /**
     * Shadow DOM Color Variable Overrides
     *
     * These --color-* definitions are crucial for Shadow DOM compatibility.
     * Without them, elements inside Shadow DOM will use the :host values
     * instead of the theme-specific values, causing colors to remain static
     * regardless of the applied theme class.
     *
     * This duplication is necessary because CSS variable resolution in
     * Shadow DOM doesn't inherit --color-* values from parent scopes
     * when they reference other variables (e.g., var(--background)).
     */
    --color-background: hsl(var(--background));
    --color-foreground: hsl(var(--foreground));
    --color-card: hsl(var(--card));
    --color-card-foreground: hsl(var(--card-foreground));
    --color-popover: hsl(var(--popover));
    --color-popover-foreground: hsl(var(--popover-foreground));
    --color-primary: hsl(var(--primary));
    --color-primary-foreground: hsl(var(--primary-foreground));
    --color-secondary: hsl(var(--secondary));
    --color-secondary-foreground: hsl(var(--secondary-foreground));
    --color-destructive: hsl(var(--destructive));
    --color-destructive-foreground: hsl(var(--destructive-foreground));
    --color-muted: hsl(var(--muted));
    --color-muted-foreground: hsl(var(--muted-foreground));
    --color-accent: hsl(var(--accent));
    --color-accent-foreground: hsl(var(--accent-foreground));
    --color-border: hsl(var(--border));
    --color-input: hsl(var(--input));
    --color-ring: hsl(var(--ring));
  }

  .mint {
    --background: 160 35% 97%;
    --foreground: 165 60% 8%;
    --card: 160 25% 99%;
    --card-foreground: 165 60% 8%;
    --popover: 160 25% 99%;
    --popover-foreground: 165 60% 8%;
    --primary: 165 60% 35%;
    --primary-foreground: 160 35% 98%;
    --secondary: 160 30% 92%;
    --secondary-foreground: 165 60% 25%;
    --muted: 160 25% 94%;
    --muted-foreground: 165 30% 40%;
    --accent: 165 70% 45%;
    --accent-foreground: 160 35% 98%;
    --destructive: 0 84% 60%;
    --destructive-foreground: 160 35% 98%;
    --border: 160 20% 88%;
    --input: 160 25% 94%;
    --ring: 165 70% 45%;
    --chart-1: 165 60% 40%;
    --chart-2: 160 55% 90%;
    --chart-3: 165 40% 45%;
    --chart-4: 170 65% 60%;
    --chart-5: 155 75% 55%;

    /**
     * Shadow DOM Color Variable Overrides
     *
     * These --color-* definitions are crucial for Shadow DOM compatibility.
     * Without them, elements inside Shadow DOM will use the :host values
     * instead of the theme-specific values, causing colors to remain static
     * regardless of the applied theme class.
     *
     * This duplication is necessary because CSS variable resolution in
     * Shadow DOM doesn't inherit --color-* values from parent scopes
     * when they reference other variables (e.g., var(--background)).
     */
    --color-background: hsl(var(--background));
    --color-foreground: hsl(var(--foreground));
    --color-card: hsl(var(--card));
    --color-card-foreground: hsl(var(--card-foreground));
    --color-popover: hsl(var(--popover));
    --color-popover-foreground: hsl(var(--popover-foreground));
    --color-primary: hsl(var(--primary));
    --color-primary-foreground: hsl(var(--primary-foreground));
    --color-secondary: hsl(var(--secondary));
    --color-secondary-foreground: hsl(var(--secondary-foreground));
    --color-destructive: hsl(var(--destructive));
    --color-destructive-foreground: hsl(var(--destructive-foreground));
    --color-muted: hsl(var(--muted));
    --color-muted-foreground: hsl(var(--muted-foreground));
    --color-accent: hsl(var(--accent));
    --color-accent-foreground: hsl(var(--accent-foreground));
    --color-border: hsl(var(--border));
    --color-input: hsl(var(--input));
    --color-ring: hsl(var(--ring));
  }

  .rose {
    --background: 350 30% 97%;
    --foreground: 345 60% 8%;
    --card: 350 20% 99%;
    --card-foreground: 345 60% 8%;
    --popover: 350 20% 99%;
    --popover-foreground: 345 60% 8%;
    --primary: 345 60% 35%;
    --primary-foreground: 350 30% 98%;
    --secondary: 350 25% 92%;
    --secondary-foreground: 345 60% 25%;
    --muted: 350 20% 94%;
    --muted-foreground: 345 30% 40%;
    --accent: 340 70% 50%;
    --accent-foreground: 350 30% 98%;
    --destructive: 0 84% 60%;
    --destructive-foreground: 350 30% 98%;
    --border: 350 15% 88%;
    --input: 350 20% 94%;
    --ring: 340 70% 50%;
    --chart-1: 345 60% 45%;
    --chart-2: 350 55% 90%;
    --chart-3: 345 40% 45%;
    --chart-4: 340 65% 60%;
    --chart-5: 355 75% 55%;

    /**
     * Shadow DOM Color Variable Overrides
     *
     * These --color-* definitions are crucial for Shadow DOM compatibility.
     * Without them, elements inside Shadow DOM will use the :host values
     * instead of the theme-specific values, causing colors to remain static
     * regardless of the applied theme class.
     *
     * This duplication is necessary because CSS variable resolution in
     * Shadow DOM doesn't inherit --color-* values from parent scopes
     * when they reference other variables (e.g., var(--background)).
     */
    --color-background: hsl(var(--background));
    --color-foreground: hsl(var(--foreground));
    --color-card: hsl(var(--card));
    --color-card-foreground: hsl(var(--card-foreground));
    --color-popover: hsl(var(--popover));
    --color-popover-foreground: hsl(var(--popover-foreground));
    --color-primary: hsl(var(--primary));
    --color-primary-foreground: hsl(var(--primary-foreground));
    --color-secondary: hsl(var(--secondary));
    --color-secondary-foreground: hsl(var(--secondary-foreground));
    --color-destructive: hsl(var(--destructive));
    --color-destructive-foreground: hsl(var(--destructive-foreground));
    --color-muted: hsl(var(--muted));
    --color-muted-foreground: hsl(var(--muted-foreground));
    --color-accent: hsl(var(--accent));
    --color-accent-foreground: hsl(var(--accent-foreground));
    --color-border: hsl(var(--border));
    --color-input: hsl(var(--input));
    --color-ring: hsl(var(--ring));
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Fix for Shadow DOM backgrounds and colors */
.bg-card {
  background-color: hsl(var(--card));
}

.text-card-foreground {
  color: hsl(var(--card-foreground));
}
